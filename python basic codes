Basic Data Structures (Lists, Tuples, Dictionaries) & Loops
Data Structures
In Python, data structures help organize and store data efficiently. Four of the most fundamental iterable data structures are:

- Lists
- Tuples
- Dictionaries
- Sets
Lists
Definition: An ordered collection of items, which can hold elements of different types.
Mutable: Lists can be changed after creation (e.g., adding, removing, or modifying elements).
Syntax: Defined using square brackets [].
# creating a list

names = ['tola','wale','kemi']
print(names)
['tola', 'wale', 'kemi']
# creating a list of lists

students = [['fola',23,'f'],
            ['toke',44,'m'],
            ['steph',22,'m']]
print(students)
[['fola', 23, 'f'], ['toke', 44, 'm'], ['steph', 22, 'm']]
# checking the data type
print(type(names))
print(type(students))
<class 'list'>
<class 'list'>
list slicing and indexing
#create a list of numbers  between  70 and 100
numbers = list(range(70,101))
print(numbers)
#indexing a list
#FORWARD INDEXING
print(numbers[0])
print(numbers[1])

print('=============BACKWARD INDEXING================')
print(numbers[-1])
print(numbers[-2])
#backward indexing 
[70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
70
71
=============BACKWARD INDEXING================
100
99
# slicing a list

print(numbers[:4]) # slice from the beginning
print(numbers[3:10]) # slice from 73 to 79
print(numbers[-7:]) # backward slicing
[70, 71, 72, 73]
[73, 74, 75, 76, 77, 78, 79]
[94, 95, 96, 97, 98, 99, 100]
# slicing and indexing lists of lists
print(students)
print(students[0][-1]) # fola's gender
print(students[2][1]) # steph's age

print(students[1][1:]) # toke's gender
[['fola', 23, 'f'], ['toke', 44, 'm'], ['steph', 22, 'm']]
f
22
[44, 'm']
List Functions
#len function 
print(len(numbers))
print(len(students))
#sorted function
some_ages = [43,12,15,9,92]
print(sorted(some_ages, reverse = True))

#max function
print(max(numbers))
print(max(some_ages))

# sum function
print(sum(numbers))
print(sum(numbers[-3:]))
31
3
[92, 43, 15, 12, 9]
100
92
2635
297
print(students)
#append method
students.append(['malik',27,'f'])
print(students)

#remove method
students.remove(students[0])
print(students)
[['fola', 23, 'f'], ['toke', 44, 'm'], ['steph', 22, 'm']]
[['fola', 23, 'f'], ['toke', 44, 'm'], ['steph', 22, 'm'], ['malik', 27, 'f']]
[['toke', 44, 'm'], ['steph', 22, 'm'], ['malik', 27, 'f']]
# pop method
students.pop(1)
['steph', 22, 'm']
students
[['toke', 44, 'm'], ['malik', 27, 'f']]
Tuples
Definition: Similar to lists but immutable, meaning their elements cannot be changed after creation.
Immutable: Tuples cannot be modified once created.
Syntax: Defined using parentheses ().
fruits = ('cashew','apple','mango')
fruits[1:]
('apple', 'man')
len(fruits)
3
Dictionaries
Definition: A collection of key-value pairs, where keys are unique identifiers for the corresponding values.
Mutable: Can be modified by adding, changing, or removing key-value pairs.
Syntax: Defined using curly braces {} with key-value pairs separated by colons.
# create a dict

nigeria = {'osun':'osogbo',
           'oyo':'ibadan',
           'kogi':'lokoja'}
print(nigeria)
print(type(nigeria))
{'osun': 'osogbo', 'oyo': 'ibadan', 'kogi': 'lokoja'}
<class 'dict'>
# key referencing.

nigeria['oyo']
'ibadan'
# dictionary methods

# adding new pairs
nigeria.update({'Lagos':'ikeja'})


# get the list of keys
print(nigeria.keys())


# get the list of values
print(nigeria.values())

print(nigeria.items())
